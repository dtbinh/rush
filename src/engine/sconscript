import os.path
import glob

Import( "env" )
Import( "env_d" )
Import( "env_r" )

out_root  = '#build/' + env['env'] + '/'
env.engine_prj = []

def dir_files( dir, mask ):
	return map( lambda x: dir + os.path.split( x )[1], glob.glob( mask ) )

def create_msvc_proj( lib_name ):
    SConscript([lib_name + '/SConscript'])
    out_root  = '#build/' + env['env'] + '/'
    proj_path = out_root + lib_name + env['MSVSPROJECTSUFFIX']
    
    print( '#src/engine/' + lib_name + '/*.cpp' )
    src_files = dir_files( "../../src/engine/" + lib_name + '/', './' + lib_name + '/*.cpp' ) 
    inc_files = dir_files( "../../src/engine/" + lib_name + '/', './' + lib_name + '/*.h' ) 
                       
    env.MSVSProject( 	target = proj_path,
    		            srcs = src_files,
    		            incs = inc_files,
    		            buildtarget = [lib_name + '_d', lib_name + '_r'],
    		            variant = ['Debug', 'Release'],
    		            auto_build_solution = 0                
    		            ) 
    return lib_name + env['MSVSPROJECTSUFFIX']

#def build_static_lib( lib_name ):
    #env_d.BuildDir( out_root + "_debug/" + proj_name, "./", duplicate = 0 ) 
    #lib_d = env_d.StaticLibrary( target = proj_name + '_d', source = src_files )

    #env_r.BuildDir( out_root + "_release/" + proj_name, "./", duplicate = 0 ) 
    #lib_r = env_r.StaticLibrary( target = proj_name + '_r', source = src_files )
    
engine_prj = [ create_msvc_proj( 'rb_core' ), 
               create_msvc_proj( 'rb_draw' ),
               create_msvc_proj( 'rb_util' ) ]

env.MSVSSolution( target = out_root + 'rush' + env['MSVSSOLUTIONSUFFIX'],
                 projects = engine_prj,
				 variant = ['Debug', 'Release'] )